/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hikmat30ce.workday.integrator.hr.db.scheduler;



import java.io.IOException;
import java.sql.Timestamp;
import javax.xml.parsers.ParserConfigurationException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.xml.sax.SAXException;

import com.hikmat30ce.workday.integrator.hr.db.clients.WorkdayHRClient;
import com.hikmat30ce.workday.integrator.hr.db.config.WorkdayHRConfiguration;
import com.hikmat30ce.workday.integrator.hr.db.models.Tblgetworkers;
import com.hikmat30ce.workday.integrator.hr.db.repository.TblgetworkersRepository;
import com.hikmat30ce.workday.integrator.hr.generated.CountryObjectIDType;
import com.hikmat30ce.workday.integrator.hr.generated.WorkerObjectIDType;
import com.hikmat30ce.workday.integrator.hr.generated.WorkerType;
import com.hikmat30ce.workday.integrator.hr.generated.WorkersResponseDataType;

/**
 *
 * @author Administrator
 */
@Component
public class SchedulingTask {

    private static final Logger log = LoggerFactory.getLogger(SchedulingTask.class);

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TblgetworkersRepository tblgetworkersRepository;

  

    //@Scheduled(fixedRate = 86400000) //24 hrs
    //@Scheduled(fixedRate = 43200000) //12 hrs
    @Scheduled(fixedRate = 3600000) //1 hr
    // @Scheduled(fixedRate = 60000)
    public void WDGetWorkers() throws SAXException, IOException, ParserConfigurationException {
        log.info("The time is now {}", Long.toString((new Timestamp(System.currentTimeMillis() / 1000)).getTime()));

        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(WorkdayHRConfiguration.class);

       

        
        WorkdayHRClient client = context.getBean(WorkdayHRClient.class);
        WorkersResponseDataType response = client.GetWorkers();

        Tblgetworkers tblgetworkers = new Tblgetworkers();
        for (WorkerType worker : response.getWorker()) {
            log.info("Worker_Reference Descriptor: " + worker.getWorkerReference().getDescriptor());

            for (WorkerObjectIDType Worker_ID : worker.getWorkerReference().getID()) {
                switch (Worker_ID.getType()) {
                    case "WID":
                        log.info("Worker_Reference WID: " + Worker_ID.getValue());
                        break;
                    case "Employee_ID":
                        tblgetworkers.setEmployeeid(Worker_ID.getValue());
                        log.info("Worker_Reference Employee_ID: " + Worker_ID.getValue());
                        break;
                }
            }
            log.info("UserID: " + worker.getWorkerData().getUserID());
            tblgetworkers.setUserid(worker.getWorkerData().getUserID());
            log.info("WorkerID: " + worker.getWorkerData().getWorkerID());

            if (worker.getWorkerData() != null
                    && worker.getWorkerData().getPersonalData() != null
                    && worker.getWorkerData().getPersonalData().getNameData() != null
                    && worker.getWorkerData().getPersonalData().getNameData().getLegalNameData() != null) {
                 //Formatted_Name 
                tblgetworkers.setFormattedname(worker.getWorkerData()
                        .getPersonalData().getNameData()
                        .getLegalNameData().getNameDetailData().getFormattedName());

                //First_Name
                tblgetworkers.setFirstname(worker.getWorkerData()
                        .getPersonalData().getNameData()
                        .getLegalNameData().getNameDetailData().getLastName());
                //Last_Name
                tblgetworkers.setLastname(worker.getWorkerData()
                        .getPersonalData().getNameData()
                        .getLegalNameData().getNameDetailData().getFirstName());
                //Country_Reference/@Descriptor
                tblgetworkers.setCountryname(worker.getWorkerData()
                        .getPersonalData().getNameData()
                        .getLegalNameData().getNameDetailData()
                        .getCountryReference().getDescriptor());
            }

            //Gender
            if (worker.getWorkerData() != null
                    && worker.getWorkerData().getPersonalData() != null
                    && worker.getWorkerData().getPersonalData().getGenderReference() != null
                    && worker.getWorkerData().getPersonalData().getGenderReference().getDescriptor() != null) {
                tblgetworkers.setGender(worker.getWorkerData().getPersonalData().getGenderReference().getDescriptor());
            }
            //Birth_Date
            if (worker.getWorkerData() != null
                    && worker.getWorkerData().getPersonalData() != null
                    && worker.getWorkerData().getPersonalData().getBirthDate()!= null) {
                tblgetworkers.setDob(worker.getWorkerData().getPersonalData().getBirthDate().toString());
            }

            log.info("Country_Reference Descriptor: " + worker.getWorkerData()
                    .getPersonalData().getNameData()
                    .getLegalNameData().getNameDetailData()
                    .getCountryReference().getDescriptor()
            );

            for (CountryObjectIDType ID : worker.getWorkerData()
                    .getPersonalData().getNameData()
                    .getLegalNameData().getNameDetailData()
                    .getCountryReference().getID()) {
                switch (ID.getType()) {
                    case "WID":
                        log.info("Country_Reference WID: " + ID.getValue());
                        break;

                    case "ISO_3166-1_Alpha-2_Code":
                        log.info("Country_Reference ISO_3166-1_Alpha-2_Code: " + ID.getValue());
                        break;
                    case "ISO_3166-1_Alpha-3_Code":
                        log.info("Country_Reference ISO_3166-1_Alpha-3_Code: " + ID.getValue());
                        break;
                    case "ISO_3166-1_Numeric-3_Code":
                        log.info("Country_Reference ISO_3166-1_Numeric-3_Code: " + ID.getValue());
                        break;
                }
            }

            log.info("First_Name: " + worker.getWorkerData()
                    .getPersonalData().getNameData()
                    .getLegalNameData().getNameDetailData().getFirstName()
            );

            log.info("Last_Name: " + worker.getWorkerData()
                    .getPersonalData().getNameData()
                    .getLegalNameData().getNameDetailData().getLastName()
            );

            //Preferred_Name_Data
            log.info("Preferred_Name_Data Name_Detail_Data Country_Reference Descriptor: " + worker.getWorkerData()
                    .getPersonalData().getNameData()
                    .getPreferredNameData().getNameDetailData().getCountryReference()
                    .getDescriptor()
            );
            for (CountryObjectIDType ID : worker.getWorkerData()
                    .getPersonalData().getNameData()
                    .getPreferredNameData().getNameDetailData()
                    .getCountryReference().getID()) {
                switch (ID.getType()) {
                    case "WID":
                        log.info("Country_Reference WID: " + ID.getValue());
                        break;

                    case "ISO_3166-1_Alpha-2_Code":
                        log.info("Preferred_Name_Data Name_Detail_Data Country_Reference ISO_3166-1_Alpha-2_Code: " + ID.getValue());
                        break;
                    case "ISO_3166-1_Alpha-3_Code":
                        log.info("Preferred_Name_Data Name_Detail_Data Country_Reference ISO_3166-1_Alpha-3_Code: " + ID.getValue());
                        break;
                    case "ISO_3166-1_Numeric-3_Code":
                        log.info("Preferred_Name_Data Name_Detail_Data Country_Reference ISO_3166-1_Numeric-3_Code: " + ID.getValue());
                        break;
                }
            }
            tblgetworkersRepository.save(tblgetworkers);
        }
    }


}
